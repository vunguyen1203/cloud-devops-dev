cài đặt server

cài đặt gitlab server
curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
sudo apt-get install gitlab-ee=14.9.1-ee.0
tắt các service chưa cần dùng: alertmanager, gitlab-kas, grafana, node-exporter, prometheus

cài docker script trên server database
#!/bin/bash
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update -y
sudo apt install docker-ce -y
sudo systemctl start docker
sudo systemctl enable docker
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker -v
docker-compose -v

cài sql trên server database
version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server
    container_name: sqlserver
    restart: always
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Str0ngPa5sVvorcl"
    volumes:
      - sqlserver-data:/var/opt/mssql

volumes:
  sqlserver-data:
    driver: local


cài cloudbeaver trên server database
version: '3.8'

services:
  cloudbeaver:
    image: dbeaver/cloudbeaver
    container_name: cloudbeaver
    restart: always
    ports:
      - "8978:8978"
    volumes:
      - cloudbeaver-data:/opt/cloudbeaver/workspace

volumes:
  cloudbeaver-data:
    driver: local

cài đặt NetCore 6:
apt update -y && apt upgrade -y
apt install -y wget apt-transport-https software-properties-common
wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
dpkg -i packages-microsoft-prod.deb
apt update -y && apt install -y dotnet-sdk-6.0
 
cài đặt NodeJS version 18:
curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
bash nodesource_setup.sh
apt install nodejs

clone dự án về server
tạo user cho dự án và thay đổi chủ và nhóm sở hữu thành user vừa tạo

triển khai fronend với pm2
npm install pm2 -g
pm2 start npm --name onlineshop-frontend -- run "start"

chạy dotnet
dotnet restore
dotnet run

quy trình triển khai dự án
môi trường: dev, pre-production(staging), production 
cách triển khai dự án: service, container standalone(chạy các dự án độc lập = docker), container orchestration(điều phối = k8s)
pp triển khai: build và deploy trên cùng server, build và deploy khác server
3 thành phần pipeline: build, test, deploy
pipeline workflow: commit -> sast -> sca -> build -> artifatct -> scan image -> deploy -> dast

tại sao cần cicd (gitlabci,jenkins,argo):
tự động hóa công việc
thống nhất quy trình
phát hành nhanh chóng
đảm bảo chất lượng
phản hồi nhanh
phát hiện lỗi
gitlab runner, jenkins agent là các robot thực hiện công việc tự đông dựa trên các file kịch bản(.gitlab-ci.yaml,jenkinsfile)

cài gitlab-runner
apt update -y
curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash
apt install gitlab-runner

chiến lược triển khai với gitlab runner (stragy runner)
for an instance runner (tạo runner với tk admin để mọi người dùng chung)
for a group runner (tạo runner trong group - các project trong group mới dùng được)
for a project runner (tạo runner trong project - nên dùng khi chạy độc lập và các tác vụ chuyên biệt, tạo runner cho người khác sử dụng khi ko có quyền admin)

quy trình 1
BE
stages:
    - build
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - dotnet restore
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo cp -rf * ${PATH_PROJECT}
        - sudo chown -R ${USER_PROJECT}. ${PATH_PROJECT}
        - |
          pid=$(sudo netstat -tlpun | grep :5214 | awk '{print $7}' | cut -d'/' -f1) || true
          if [ -n "$pid" ]; then
              sudo kill -9 ${pid}
          fi
        - sudo su ${USER_PROJECT} -c "cd ${PATH_PROJECT};nohup dotnet run > log.txt 2>&1 &"
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags
FE
stages:
    - build
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - npm install 
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo cp -rf * ${PATH_PROJECT}
        - sleep 5
        - sudo chown -R ${USER_PROJECT}. ${PATH_PROJECT}
        - sudo su ${USER_PROJECT} -c "cd ${PATH_PROJECT};pm2 delete ${CI_PROJECT_NAME}; pm2 start npm --name ${CI_PROJECT_NAME} -- run 'start'"
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags


quy trình 2 - triển khai build và deploy khác server
commit -> git server -> server build -> server jfrog -> deploy server

cài netcore6, node18, gitlab-runner lên server build
cài docker và jfrog lên server artifactory

mkdir -p /tools/jfrog/data
chown -R 1030:1030 /tools/jfrog
docker run --name artifactory-jfrog --restart unless-stopped -v /tools/jfrog/data/:/var/opt/jfrog/artifactory -d -p 8081:8081 -p 8082:8082 releases-docker.jfrog.io/jfrog/artifactory-oss:7.77.5

đẩy repo lên jfrog
curl -X PUT -u onlineshop:'123456aA@' -T onlineshop.zip "http://192.168.163.133:8082/artifactory/online-shop/"
kéo repo từ jforg về
curl -u onlineshop:"123456aA@" -O "http://192.168.163.133:8082/artifactory/online-shop/onlineshop.zip"

BE
stages:
    - build
    - push
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
    ZIP_VERSION: "${CI_PROJECT_NAME}-$CI_COMMIT_SHORT_SHA-$CI_COMMIT_TAG.zip"
 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - dotnet restore
        - zip -r $ZIP_VERSION .
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

push:
    stage: push
    variables:
        GIT_STRATEGY: none
    script:
        - curl -X PUT -u $ARTIFACT_USER:$ARTIFACT_PASS -T $ZIP_VERSION "$ARTIFACT_URL"
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo su ${USER_PROJECT} -c "cd ${PATH_PROJECT};rm -rf *;curl -u $ARTIFACT_USER:$ARTIFACT_PASS -O "$ARTIFACT_URL/$ZIP_VERSION";unzip -o $ZIP_VERSION"
        - |
          pid=$(sudo netstat -tlpun | grep :5214 | awk '{print $7}' | cut -d'/' -f1) || true
          if [ -n "$pid" ]; then
              sudo kill -9 ${pid}
          fi
        - sudo su ${USER_PROJECT} -c "cd ${PATH_PROJECT};nohup dotnet run > log.txt 2>&1 &"
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

FE
cài nginx
tạo file conf

stages:
    - build
    - push
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
    ZIP_VERSION: "${CI_PROJECT_NAME}-$CI_COMMIT_SHORT_SHA-$CI_COMMIT_TAG.zip"
 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - npm install 
        - CI=false npm run build
        - zip -r $ZIP_VERSION build onlineshop.conf
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

push:
    stage: push
    variables:
        GIT_STRATEGY: none
    script:
        - curl -X PUT -u $ARTIFACT_USER:$ARTIFACT_PASS -T $ZIP_VERSION "$ARTIFACT_URL"
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo su ${USER_PROJECT} -c "cd ${PATH_PROJECT};rm -rf *;curl -u $ARTIFACT_USER:$ARTIFACT_PASS -O "$ARTIFACT_URL/$ZIP_VERSION";unzip -o $ZIP_VERSION"
        - sudo usermod -aG $USER_PROJECT www-data
        - sudo bash -c "cd ${PATH_PROJECT};rm -rf /etc/nginx/conf.d/${USER_PROJECT}.conf ; mv ${USER_PROJECT}.conf /etc/nginx/conf.d"
        - sudo nginx -s reload
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

quy trình 3
cài docker
git work flow: code -> dockerfile -> docker images -> docker container
                                                   
dockerfile
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /app

COPY . .
RUN dotnet restore

CMD ["dotnet","run","--urls","http://0.0.0.0:5214"]

stages:
    - build
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    PATH_PROJECT: "/home/${USER_PROJECT}/${CI_PROJECT_NAME}"
    IMAGE_VERSION: "${CI_PROJECT_NAME}:${CI_COMMIT_BRANCH}_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}"
 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - docker build -t ${IMAGE_VERSION} .
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - sudo su ${USER_PROJECT} -c "docker rm -f ${CI_PROJECT_NAME};docker run --name ${CI_PROJECT_NAME} -dp ${BE_PORT} ${IMAGE_VERSION}"
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

usermod -aG docker gitlab-runner
usermod -aG docker onlineshop


quy trình 4
git work flow: code -> dockerfile -> docker images -> docker hub(server registry) -> docker container

cài docker, certbot lên server registry
clone Portus về
certbot certonly --standalone -d portus.vucp2912n720.online --preferred-challenges http --agree-tos -m vucp2912n@gmail.com --keep-until-expiring
coppy 2 file fullchain và privkey và thư mục secert với tên mới là portus.crt và portus.key
sửa file .env
chạy docker compose
docker tag đổi tên images
login vào registry docker login portus.vucp2912n720.online -u onlineshop -p onlineshop
push lên registry


stages:
    - build
    - push
    - deploy

variables:
    USER_PROJECT: "onlineshop"
    IMAGE_VERSION: "${CI_REGISTRY}/${USER_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"


 
build:
    stage: build
    variables:
        GIT_STRATEGY: clone
    script:
        - docker build -t ${IMAGE_VERSION} .
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

push:
    stage: push
    variables:
        GIT_STRATEGY: none
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - docker push ${IMAGE_VERSION}
    after_script:
        - docker logout $CI_REGISTRY
    tags:
        - online-shop-runner-build-shell
    only:
        - tags

deploy:
    stage: deploy
    variables:
        GIT_STRATEGY: none
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - docker pull ${IMAGE_VERSION}
        - sudo su ${USER_PROJECT} -c "docker rm -f ${CI_PROJECT_NAME};docker run --name ${CI_PROJECT_NAME} -dp ${BE_PORT} ${IMAGE_VERSION}"
    # đối với fe thay bằng FE_PORT
    after_script:
        - docker logout $CI_REGISTRY
    tags:
        - online-shop-runner-dev-shell
    only:
        - tags

docker file fe
FROM node:18-alpine as build
WORKDIR /app
COPY . .
RUN npm install
RUn npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx","-g","daemon off;"]

